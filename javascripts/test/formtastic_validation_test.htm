<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <title>Formtastic Validation Test</title>
    <style type="text/css">
      body {
      margin:0;
      padding:0;
      }
    </style>
    <link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/3.1.2/build/cssfonts/fonts-min.css" />
    <script type="text/javascript" charset="utf-8" src="http://yui.yahooapis.com/3.1.2/build/yui/yui-min.js"></script>
    <script type="text/javascript" charset="utf-8" src="../lib/livevalidation.min.js"></script>
    <script type="text/javascript" charset="utf-8" src="../src/formtastic_validation.js"></script>
    <style type="text/css">
      #testLogger {
      margin-bottom: 1em;
      }
      
      #testLogger .yui3-console .yui3-console-title {
      border: 0 none;
      color: #000;
      font-size: 13px;
      font-weight: bold;
      margin: 0;
      text-transform: none;
      }
      #testLogger .yui3-console .yui3-console-entry-meta {
      margin: 0;
      }
      
      .yui3-skin-sam .yui3-console-entry-pass .yui3-console-entry-cat {
      background: #070;
      color: #fff;
      }
      .yui3-skin-sam .yui3-console-entry-fail .yui3-console-entry-cat {
      background: #700;
      color: #fff;
      }
    </style>
  </head>
  <body class="yui3-skin-sam yui-skin-sam" onload="initialize()">
    <script type="text/javascript">
        YUI().use('node', 'console', 'test', function(Y) {
        Y.namespace("formtastic_validation.test");
   
        // Input tests
        Y.formtastic_validation.test.InputTestCase = new Y.Test.Case({
            name: "Inputs",
            
            "should return true for text, password, radio, checkbox. false otherwise" : function() {
                var Assert = Y.Assert;
                Assert.isTrue(isValidInputType("text"));
                Assert.isTrue(isValidInputType("password"));
                Assert.isTrue(isValidInputType("radio"));
                Assert.isTrue(isValidInputType("checkbox"));
                Assert.isFalse(isValidInputType("hidden"));
                Assert.isFalse(isValidInputType("button"));
                Assert.isFalse(isValidInputType("file"));
                Assert.isFalse(isValidInputType("image"));
                Assert.isFalse(isValidInputType("reset"));
                Assert.isFalse(isValidInputType("submit"));
            },
       
            "should select the valid input elements in an array" : function() {
                var Assert = Y.Assert;
	        var selectedInputs = selectInputElements();
	        Assert.isArray(selectedInputs);
	        Assert.areEqual(13, selectedInputs.length); // selected an extra yui test input element
            },

	    "should return the validation key" : function() {
	        var Assert = Y.Assert;
	        var key = extractValidationKey("validation_whatever_it_is");
	        Assert.areEqual("whatever_it_is", key);
	        key = extractValidationKey("validate_something_wrong");
	        Assert.isNull(key);
	    },

	    "should return the regex" : function() {
	        var Assert = Y.Assert;
	        var extractedRegex = extractFormatRegex("/^some\s(regex)[\d]+$/");
	        Assert.areEqual("^some\s(regex)[\d]+$", extractedRegex);
	    },

	    "should return the confirmation id of the element" : function() {
	        var Assert = Y.Assert;
	        var selectedInputs = selectInputElements();
	        Assert.areEqual("user_name_confirmation", confirmationID(selectedInputs[1]));
	    },

	    "should return the validation attributes of the element" : function() {
	        var Assert = Y.Assert;
	        var selectedInputs = selectInputElements();
	        var validationAttributes = getValidationAttributes(selectedInputs[1]);
	        Assert.isObject(validationAttributes);
	        Assert.areEqual("you must have a name", validationAttributes.message);
	        validationAttributes = getValidationAttributes(selectedInputs[2]);
	        Assert.isObject(validationAttributes);
	        Assert.areEqual("/someone@email/", validationAttributes.with);
	    }
        });
   
        // Binding tests
        Y.formtastic_validation.test.BindingTestCase = new Y.Test.Case({
        name: "Bindings",
        
        "Emacs should sing for me" : function() {
        var Assert = Y.Assert;
        Assert.areEqual(5, 5);
        }
        
        });
   
        Y.formtastic_validation.test.TestSuite = new Y.Test.Suite("Test Suite");
        Y.formtastic_validation.test.TestSuite.add(Y.formtastic_validation.test.InputTestCase);
        Y.formtastic_validation.test.TestSuite.add(Y.formtastic_validation.test.BindingTestCase);
        
        //create the console
        var r = new Y.Console({
        newestOnTop : false,
        style: 'block' // to anchor in the example content
        });
        
        r.render('#testLogger');
        
        Y.Test.Runner.add(Y.formtastic_validation.test.TestSuite);
        
        //run the tests
        Y.Test.Runner.run();
        });
    </script>

    <form action="#" class="formtastic user" id="new_user" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="#" /></div>
      <fieldset class="inputs"><legend><span>User</span></legend><ol>
	  <li class="string required" id="user_name_input"><label for="user_name">Name<abbr title="required">*</abbr></label><input id="user_name" maxlength="255" name="user[name]" size="50" type="text" validation="validates_presence_of" validation_message="you must have a name" /></li>
	  <li class="string optional" id="user_email_input"><label for="user_email">Email</label><input id="user_email" maxlength="255" name="user[email]" size="50" type="text" validation="validates_format_of" validation_with="/someone@email/" /></li>

	  <li class="numeric optional" id="user_mobile_input"><label for="user_mobile">Mobile</label><input id="user_mobile" name="user[mobile]" size="50" type="text" validation="validates_length_of" validation_is="8" validation_message="its too short" /></li>
	  <li class="numeric optional" id="user_age_input"><label for="user_age">Age</label><input id="user_age" name="user[age]" size="50" type="text" validation="validates_numericality_of" validation_message="Only 21 and above are allowed" validation_minimum="21" validation_only_integer="true" /></li>
	  <li class="string optional" id="user_gender_input"><label for="user_gender">Gender</label><input id="user_gender" maxlength="255" name="user[gender]" size="50" type="text" validation="validates_inclusion_of" validation_in="[&quot;male&quot;,&quot;female&quot;]" /></li>
	  <li class="string optional" id="user_address_input"><label for="user_address">Address</label><input id="user_address" maxlength="255" name="user[address]" size="50" type="text" validation="validates_exclusion_of" validation_in="[&quot;cafe&quot;,&quot;bar&quot;]" /></li>
	  <li class="password optional" id="user_password_input"><label for="user_password">Password</label><input id="user_password" maxlength="255" name="user[password]" size="50" type="password" validation="validates_confirmation_of" /></li>
	  <li class="password optional" id="user_password_confirmation_input"><label for="user_password_confirmation">Password confirmation</label><input id="user_password_confirmation" name="user[password_confirmation]" size="50" type="password" /></li>

	  <li class="string optional" id="user_website_input"><label for="user_website">Website</label><input id="user_website" maxlength="255" name="user[website]" size="50" type="text" validation="validates_format_of" validation_with="/^www.something.com$/" /></li>
	  <li class="string required" id="user_company_input"><label for="user_company">Company<abbr title="required">*</abbr></label><input id="user_company" maxlength="255" name="user[company]" size="50" type="text" validation="validates_presence_of validates_inclusion_of" validation_in="[&quot;A Inc&quot;,&quot;B Inc&quot;]" /></li>
	  <li class="string optional" id="user_title_input"><label for="user_title">Title</label><input id="user_title" maxlength="255" name="user[title]" size="50" type="text" validation="validates_exclusion_of" validation_in="[&quot;Dr&quot;,&quot;Ms&quot;]" /></li>
	  <li class="boolean optional" id="user_terms_of_service_input"><label for="user_terms_of_service"><input name="user[terms_of_service]" type="hidden" value="0" /><input id="user_terms_of_service" name="user[terms_of_service]" type="checkbox" validation="validates_acceptance_of" value="1" />Terms of service</label></li>
      </ol></fieldset>

      <fieldset class="buttons"><ol>
	  <input name="commit" type="submit" value="add" />

      </ol></fieldset>
    </form>

  </body>
</html>
